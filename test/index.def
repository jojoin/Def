;-
	单元测试
-;

;; 测试单元



;


;; 类型
include "script/type.def"                 ; 类型
include "script/variable.def"             ; 变量

;; 控制流结构
include "script/controlflow/scope.def"    ; 子作用域
include "script/controlflow/if.def"       ; if
include "script/controlflow/while.def"    ; while

;; 函数
include "script/function/common.def"      ; 函数
include "script/function/template.def"    ; 函数模板
include "script/function/nested.def"      ; 嵌套函数(变量自动捕获)
include "script/function/recurse.def"     ; 递归函数

;; 宏，标准库
include "script/macro/common.def"
include "script/macro/std.def"
include "script/macro/stdtest.def"
include "script/macro/uvn.def"        ; 全局唯一名称

;; 类
include "script/class/common.def"      ; 
include "script/class/structure.def"   ; 构造函数
include "script/class/reference.def"   ; 引用类型
include "script/class/copy.def"        ; 对象拷贝

;; 数据结构
include "script/datastruct/common.def"
include "script/datastruct/infun.def"
include "script/datastruct/inclass.def"
include "script/datastruct/tuple.def"    ; 元组

;; 标准模板库
include "script/stl/vector1.def"    ; 基于宏的 vector
include "script/stl/vector2.def"    ; 基于类模板的 vector
include "script/stl/tpltype.def"    ; 类模板，类型重命名


;









;-

let (a==b)(eq a b)
let (a*b)(mul a b)


var q1 1
var q2 2


if q1*q2==q2 (
	putchar 4
) else (
	putchar 98
)


-;



;-


type Kid (
    Int c
    Int d
)



type Node (
	refer Int a
	Int b
	Kid k
	fun Node(Int n)(
		;set a n
		set b n
		elmset k c n
		elmset k d n
	)
)

fun getNewNode()(
	;new Node 99
	var n1 new Node 99
	elmset n1 b 97
	var n2 n1
	var n3 n2
	ret n3
)

fun getNode()(
	var n1 getNewNode
	elmset n1 b 97
	var n2 n1
	var n3 n2
	ret n3
)

fun putcharNode(Node n)(
	putchar elmget n b
)

;var nnn new Node 97
var nnn getNode
putcharNode nnn
putchar elmget nnn b



;var kkk new Kid 1 2
;delete kkk





var arr new array 7 Kid
var kkk new Kid 1 2

delete arr
delete kkk

elmget kkk c




-;






;-






; 模板接口
type Base_T (
	dcl str()
)


; 模板函数
;tpl fun eat(Nil v Base_T b)(
;	
;)
;


; 模板类，容器 Vector
tpl(Base_T T) type Vector(
	refer array 0 T vptr
	Int max_length ; 空间大小
	Int length ; 当前大小
	; 构造
	fun Vector()(
		set vptr new array 7 T ; 首次分配空间
	)
	; 长度
	fun Int size(T v)(
		length
	)
	; 末尾添加元素
	fun push(T v)(
		if eq length max_length (
			set max_length mul max_length 2 ; 空间大小倍增
			var newvptr new array max_length T ; 分配新空间
			var i length
			while i ( ; 拷贝所有元素
				arrset newvptr i arrget vptr i 
				set i sub i 1
			)
			delete vptr ; 释放旧空间
			set vptr newvptr
		)
		arrset vptr length v
		set length add length 1
	)
	; 末尾弹出元素
	fun pop()(
		if length
			set length sub length 1
	)
	; 访问末尾元素
	fun last()(
		var idx length
		if idx 
			set idx sub idx 1
		arrget vptr idx
	)
	; 下标访问
	fun T at(Int idx)(
		if has_next (
			ret elmivk next last
		) else (
			ret value ; 自己就是最后一个
		)
	)
)

; 模板类使用

type Node (
	Int num
	fun Node(Int n)(
		set num n
	)
	fun str()(
		putchar num
	)
)

var nodes Vector(Node)

elmivk nodes push Node 97
elmivk nodes push Node 98
elmivk nodes push Node 99
elmivk nodes push Node 100

var elm1 elmivk at 0
var elm2 elmivk at 0
var elm3 elmivk at 0
var elm4 elmivk at 0

elmivk elm1 str
elmivk elm2 str
elmivk elm3 str
elmivk elm4 str


-;


;;;;;;;;;;;;;   未确认语法  ;;;;;;;;;;;;


;-


let (a<b)(set a add a b)
let (obj<elm>)(elmget obj elm)
type Point(
	Int x
	Int y
)
var p1 Point 1 2
putchar p1<x>



let (a#) (fun a)
let (a>>) (putchar a)

show#(Int n)(
	n>>
	(add n 1)>>
)

show 98
show 99
show 100

let (a`func`) (fun a)

let function(a) (a#)
let func(a) (a`func`)
let mcro(a) (function a)

function fff(Int n)(
	n>>
)
func fnn(Int n)(
	n>>
)
mcro mmm(Int n)(
	let (n++)(set n add n 1)
	n>>
	f#()(
		n++
		n>>
	)
	f
)

fff 120
fnn 121
mmm 122


let (a+b) (add a b)
putchar ((1+2))+((3+4)+5)+6+7


-;


;-



fun wrap()(
	
	type Inner(
		Int x
		Int y
	)

	var i Inner 1 2

	putchar elmget i x
	
)

wrap


fun addP(a b)(
	
)

Fun 

putchar abs 97

fun callback(Function(Point Point Point) func)(
	func 1 2;
)

callback lda(a b)( elmset p3 x add a b)


xxx(Point p3 Int a Int b)(
	elmset p3 x add a b
)




var cond putchar 90



if 0 (
	add 1 putchar 97
) else if 1 (
	add 2 putchar 98
) else (
	add 2 putchar 99
)

putchar 111






; duck typing

elmget p x
elmput p x 5

elmchk p Int x
elmhas p Int x 
elmivk p putx 123


;; 自适应函数 类型自动转换识别
adt fun Int getPx(Point p)(
	elmget p x
)

;; 自适应类型转换
var pot adt p Point


;; 函数声明
dcl Point addP(Point Point)






;; 成员函数类定义
type Line ( 
	Point a 
	Point b
	; 成员函数
	dcl Point addP(Point Point)

	fun Point addA(Point v)(
		add a v
	)
	type Line fun Point addA(Int v1 Int v2)(
		add a Point v1 v2
	)
)



;; 类初始化
var li Line p1 p2


;; 成员函数调用
elmivk li add2a 5 6


-;


